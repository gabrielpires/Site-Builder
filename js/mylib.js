
/*

 Generated by My Library Builder v1.0 (http://www.cinsoft.net/mylib-builder.asp)

 Permission is hereby granted, free of charge, to any person
 obtaining a copy of this software and associated documentation
 files (the "Software"), to deal in the Software without
 restriction, including without limitation the rights to use,
 copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the
 Software is furnished to do so, subject to the following
 conditions:

 The above copyright notice and this permission notice shall be
 included in all copies or substantial portions of the Software.

 Modified copies of the Software must be renamed.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.

*/
// Mon, 27 Sep 2010 02:08:05 UTC
// My Library (http://www.cinsoft.net/mylib.html)
// Copyright (c) 2007-2010 by David Mark. All Rights Reserved.
var API, global = this;
API = API || {};

(function() {
  var doc, html;

  // Feature testing support

  var reFeaturedMethod = new RegExp('^(function|object)$', 'i');

  // Test for properties of host objects that are never callable (e.g. document nodes, elements)

  var isRealObjectProperty = function(o, p) {
    return !!(typeof o[p] == 'object' && o[p]);
  };

  API.isRealObjectProperty = isRealObjectProperty;

  var isHostMethod = function(o, m) {
    var t = typeof o[m];
    return !!((reFeaturedMethod.test(t) && o[m]) || t == 'unknown');
  };

  API.isHostMethod = isHostMethod;

  var isHostObjectProperty = function(o, p) {
    var t = typeof o[p];
    return !!(reFeaturedMethod.test(t) && o[p]);
  };

  API.isHostObjectProperty = isHostObjectProperty;

  // Test multiple API properties

  var areFeatures = function() {
    var i = arguments.length;
    while (i--) {
      if (!API[arguments[i]]) {
        return false;
      }
    }
    return true;
  };

  API.areFeatures = areFeatures;

  // for-in filter

  var isOwnProperty = function(o, p) {
    var prop = o.constructor.prototype[p];
    return typeof prop == 'undefined' || prop !== o[p];
  };

  API.isOwnProperty = isOwnProperty;

  if (isRealObjectProperty(this, 'document')) {
    doc = this.document;
  }
  
  var inherit = (function() {
    var Fn = function() {};
    return function(fnSub, fnSuper) {
      Fn.prototype = fnSuper.prototype;
      fnSub.prototype = new Fn();
      fnSub.prototype.superConstructor = fnSuper;
      fnSub.prototype.constructor = fnSub;
    };
  })();
  API.inherit = inherit;
  
  var elementUniqueId = (function() {
    var it = 0;
    return function(el) { return el.uniqueID || (el.uniqueID = '_api' + it++); };
  })();

  API.elementUniqueId = elementUniqueId;

  var attachDocumentReadyListener, bReady, documentReady, documentReadyListener, readyListeners = [];
  var canAddDocumentReadyListener, canAddWindowLoadListener, canAttachWindowLoadListener;

  if (doc) {
    canAddDocumentReadyListener = isHostMethod(doc, 'addEventListener');
    canAddWindowLoadListener = isHostMethod(this, 'addEventListener');
    canAttachWindowLoadListener = isHostMethod(this, 'attachEvent');

    //if (canAddDocumentReadyListener || canAddWindowLoadListener || canAttachWindowLoadListener) {
      bReady = false;
      documentReady = function() { return bReady; };
      documentReadyListener = function(e) {
        if (!bReady) {
          bReady = true;
          var i = readyListeners.length;
          var m = i - 1;
          // NOTE: e may be undefined (not always called by event handler)
          while (i--) { readyListeners[m - i](e); }
        }
      };

      attachDocumentReadyListener = function(fn, docNode) {
        var addListeners = function(win) {
          if (canAddDocumentReadyListener) {
            docNode.addEventListener('DOMContentLoaded', documentReadyListener, false);
          }
          if (canAddWindowLoadListener) {
            global.addEventListener('load', documentReadyListener, false);
          } else if (canAttachWindowLoadListener) {
            global.attachEvent('onload', documentReadyListener);
          } else {
            var oldOnLoad = global.onload;              
            global.onload = function(e) { if (oldOnLoad) { oldOnLoad(e); } documentReadyListener(); };
          }
        };
        docNode = docNode || global.document;
        if (docNode == global.document) {
          if (!readyListeners.length) {
            addListeners(global);
          }
          readyListeners[readyListeners.length] = fn;
          return true;
        }
        if (getDocumentWindow) {
          var win = getDocumentWindow(docNode);
          if (win) {
            addListeners(win);
            return true;
          }
        }
        return false;
      };

      API.documentReady = documentReady;
      API.documentReadyListener = documentReadyListener;
      API.attachDocumentReadyListener = attachDocumentReadyListener;
    //}
  }
  
  var hasAttribute;
  
  var addOption, addOptions, getOptionValue, formChanged, inputValue, inputChanged, removeOptions, serializeFormUrlencoded, urlencode;
  

  API.emptyNode = emptyNode = function(node) {
    while (node.firstChild) {
      node.removeChild(node.firstChild);
    }
  };

  function getElementDocument(el) {
    if (el.ownerDocument) {
      return el.ownerDocument;
    }
    if (el.parentNode) {
      while (el.parentNode) {
        el = el.parentNode;
      }
      if (el.nodeType == 9 || (!el.nodeType && !el.tagName)) {
        return el;
      }
      // FIXME: This is stupid, untangle attachListenerFactory
      if (el.document && typeof el.tagName == 'string') {
        return el.document;
      }
    }
    return null;
  }

  API.getElementDocument = getElementDocument;

  
  var allElements, getAnElement, getHtmlElement, isDescendant;
  if (doc) {

    if (isHostObjectProperty(doc, 'all')) {
      allElements = (function() {
        return function(el, bFilter) {
          var i, a, n, r;
          if (!bFilter) {
            return el.all;
          }
          else {
            a = toArray(el.all);
            i = a.length;
            r = [];

            while (i--) {
              // Code duplicated for performance
              n = a[i];
              if ((n.nodeType == 1 && n.tagName != '!') || (!n.nodeType && n.tagName)) {
                r[r.length] = a[i];
              }
            }
            return r.reverse();
          }
        };
      })();
    }

    // Returns the HTML element by default or optionally the first element it finds.
    getHtmlElement = function(docNode, bAnyElement) {
      var h, all;
      docNode = docNode || global.document;
      h = isRealObjectProperty(docNode, 'documentElement')?docNode.documentElement:((typeof getEBTN == 'function')?getEBTN('html', docNode)[0]:null);
      if (!h && allElements) {
        all = allElements(docNode); // Don't bother to filter for this
        h = all[(all[0].tagName == '!')?1:0];
        if (h && !bAnyElement && h.tagName.toLowerCase() != 'html') { h = null; }
      }
      return h;
    };

    API.getHtmlElement = getHtmlElement;

    // Returns any element
    getAnElement = function(docNode) {
      return getHtmlElement(docNode, true);
    };

    API.getAnElement = getAnElement;

    html = getAnElement();
    if (html && typeof html.parentNode != 'undefined') {
      isDescendant = function(el, elDescendant) {
        var parent = elDescendant.parentNode;
        while (parent && parent != el) {
          parent = parent.parentNode;
        }
        return parent == el;
      };
    }

    API.isDescendant = isDescendant;
  }
  
  if (doc) {
  
    attributesBad = !!(html && isHostMethod(html, 'getAttribute') && html.getAttribute('style') && typeof html.getAttribute('style') == 'object');
    if (!attributesBad && isHostMethod(doc, 'createElement')) {

      // TODO: Rename to missingAttributesBad--specs disagree with established quasi-standards (return null for missing attributes)

      numericAttributesBad = (function() {
        var el = doc.createElement('td');
        if (el && isHostMethod(el, 'getAttribute')) {
          return el.getAttribute('colspan') !== null;
        }
      })();

      encTypeAttributeBad = (function() {
        var el = doc.createElement('form');
        el.setAttribute('enctype', 'application/x-www-form-urlencoded');
        el.removeAttribute('enctype');
        return el.getAttribute('enctype') !== null;
      })();

      valueHasAttributeBad = (function() {
        var el = doc.createElement('input');
        el.type = 'checkbox';
        el.checked = true;
        return (typeof el.hasAttribute != 'undefined' && el.hasAttribute('value'));
      })();
    }
    hasAttribute = (function() {
      var attributeSpecified, v;
      if (html && isHostMethod(html, 'hasAttribute')) {
        return function(el, name) {
		var re, nameLower = name.toLowerCase();
		var alias = attributeAliases[nameLower];
		var valueType = typeof el[alias];

		if (numericAttributesBad) {
			if (reSpan.test(nameLower)) {

				// Some agents (e.g. Blackberry browser) return '' for missing span attributes

				if (!el.getAttribute(nameLower)) {
					return false;
				}

				// Check outer HTML as last resort (IE8 standards mode known to take this fork)

				if (typeof el.outerHTML == 'string') {
					re = new RegExp('^[^>]*\\s+' + name + '=([\'"])?\\w+\\1?', 'i');
					return re.test(el.outerHTML);
				}
			} else if (valueType == 'number' && !el.getAttribute(nameLower)) {
				return false;
			} else if (reUserBoolean.test(nameLower)) {
				var b = el['default' + nameLower.substring(0, 1).toUpperCase() + name.substring(1)];
				if (typeof b == 'boolean') { // XML documents will not feature these boolean properties
					return b;
				}
			}
		}
		if (encTypeAttributeBad && nameLower == 'enctype') {
			// TODO: Consolidate
			if (typeof el.outerHTML == 'string') {
				re = new RegExp('^[^>]*\\s+' + name + '=([\'"])?\\w+\\1?', 'i');
				return re.test(el.outerHTML);
			}
			return !!(el.attributes.enctype && el.attributes.enctype.specified);
		}
		if (valueHasAttributeBad && nameLower == 'value' && typeof el.outerHTML == 'string') {
			re = new RegExp('^[^>]*\\s+value=([\'"])?\\w*\\1?', 'i');
			return re.test(el.outerHTML);					
		}
		return el.hasAttribute(name);
        };
      }
      if (html && isHostMethod(html, 'attributes')) {
        attributeSpecified = function(el, name) {
          v = el.attributes[name];
          return !!(v && v.specified);
        };
        if (attributesBad) {
          return function(el, name) {

		// MSXML document

		var doc = arguments[2] || getElementDocument(el);
		if (doc && typeof(doc.selectNodes) != 'undefined') { return attributeSpecified(el, name); } // XML document
		var value, re, nameLower = name.toLowerCase();

		// NOTE: encType is a non-standard alias found only in broken MSHTML DOM's (only applies to attributes collection)

		var alias = nameLower == 'enctype' ? 'encType' : attributeAliases[nameLower];
					
		if (alias && alias.toLowerCase() == nameLower) {
			name = alias;
		}

		// NOTE: Broken MSHTML DOM is case-sensitive here with custom attributes

		if (el.attributes) {
			value = el.attributes[name] || el.attributes[nameLower];
		}
		if (value) {
			if (reSpan.test(nameLower) && value.value == '1') {
				re = new RegExp('^[^>]*\\s+' + name + '=([\'"])?\\w*\\1?', 'i');
				return re.test(el.outerHTML);
			}

			// NOTE: enctype and value attributes never specified

			if (value.specified) {
				return true;
			}

			if (typeof el[name] == 'boolean') {
				if (reUserBoolean.test(nameLower)) {
					return el['default' + nameLower.substring(0, 1).toUpperCase() + name.substring(1)];
				}
				return el[name];
			}

			// TODO: Consolidate

			if (nameLower == 'value' && ((/^input$/i.test(el.tagName) && /^text$/i.test(el.type)))) {
				return !!(el.defaultValue || el.defaultValue != el.value);
			}

			// TODO: Consolidate

			if (/^(enctype|value)$/.test(nameLower) && typeof el.outerHTML == 'string') {
				re = new RegExp('^[^>]*\\s+' + name + '=([\'"])?\\w*\\1?', 'i');
				return re.test(el.outerHTML);
			}
		}
		return false;
          };
        }
        return attributeSpecified;
      }
    })();

    API.hasAttribute = hasAttribute;
    
    // Form section

    if (hasAttribute) {
      getOptionValue = function(o) {    
        return (o.value || (hasAttribute(o, 'value')?o.value:o.text)); 
      };
    }

    API.getOptionValue = getOptionValue;

    if (isHostMethod(global, 'Option')) {
      addOption = function(el, text, value) {
        var o = new global.Option(), len = el.options.length;
        o.text = text;
        if (typeof value != 'undefined') { o.value = value; }
        if (el.options.add) {
          el.options.add(o, el.options.length);
        }
        if (len == el.options.length) {
          el.options[el.options.length] = o;
        }
        return o;
      };

      API.addOption = addOption;

      addOptions = function(el, options) {
        var opt;
        for (opt in options) { if (isOwnProperty(options, opt)) { addOption(el, options[opt], opt); } }
      };

      API.addOptions = addOptions;
    }

    removeOptions = function(el) {
      el.options.length = 0;
      var l = el.options.length;		
      while (l--) { el.options[l] = null; }
    };

    API.removeOptions = removeOptions;

    urlencode = (function() {
      var f = function(s) {
      return encodeURIComponent(s).replace(/%20/,'+').replace(/(.{0,3})(%0A)/g,
        function(m, a, b) {return a+(a=='%0D'?'':'%0D')+b;}).replace(/(%0D)(.{0,3})/g,
        function(m, a, b) {return a+(b=='%0A'?'':'%0A')+b;});
      };

      if (typeof encodeURIComponent != 'undefined' && String.prototype.replace && f('\n \r') == '%0D%0A+%0D%0A') {
         return f;
      }
    })();

    API.urlencode = urlencode;

    if (getOptionValue) {
    inputValue = function(el, bDefault) {
      var a, o, t = el.type;

      if (t && !t.indexOf('select')) {
        a = [];
        for (var j = 0, jlen = el.options.length; j < jlen; j++) {
          o = el.options[j];
          if (o[(bDefault)?'defaultSelected':'selected']) {
            a[a.length] = getOptionValue(o);
          }
        }
        if (a.length == 1) { a = a[0]; }
        return a;
      }
      switch(t) {
      case 'checkbox':
      case 'radio':
        return (el[(bDefault)?'defaultChecked':'checked'])?el.value || 'on':'';
      default:
        return el[(bDefault)?'defaultValue':'value'];
      }
    };

    API.inputValue = inputValue;

    inputChanged = function(el) {
      var i;
      var d = inputValue(el, true);
      var v = inputValue(el);
      
      if (typeof d == 'string') {
        return (d == v);
      }
      i = d.length;
      while (i--) {
        if (d[i] != v[i]) { return true; }
      }
      return false;
    };

    API.inputChanged = inputChanged;

    formChanged = function(el) {
      var i, els = el.elements;

      i = els.length;
      while (i--) {
        if (inputChanged(els[i])) { return true; }
      }
      return false;
    };
    }

    
    if (urlencode && getOptionValue) {
      serializeFormUrlencoded = function(f) {
        var e, // form element
            n, // form element's name
            t, // form element's type
            o, // option element
            es = f.elements,
            c = []; // the serialization data parts

        var reCheck = new RegExp('^(checkbox|radio)$');
        var reText = new RegExp('^(text|password|hidden|textarea)$');

        function add(n, v) {
          c[c.length] = urlencode(n) + "=" + urlencode(v);
        }

        for (var i=0, ilen=es.length; i<ilen; i++) {
          e = es[i];
          n = e.name;
          if (n && !e.disabled) {
            t = e.type;
            if (!t.indexOf('select')) {
              // The 'select-one' case could reuse 'select-multiple' case
              // The 'select-one' case code is an optimization for
              // serialization processing time.
              if (t == 'select-one' || e.multiple === false) {
                if (e.selectedIndex >= 0) {
                  add(n, getOptionValue(e.options[e.selectedIndex]));
                }
              }
              else {
                for (var j = 0, jlen = e.options.length; j < jlen; j++) {
                  o = e.options[j];
                  if (o.selected) {
                    add(n, getOptionValue(o));
                  }
                }
              } 
            }
            else if (reCheck.test(t)) {
              if (e.checked) {
                add(n, e.value || 'on');
              }          
            }
            else if (reText.test(t)) {
              add(n, e.value);
            }
          }
        }
        return c.join('&');
      };
    }
    API.serializeFormUrlencoded = serializeFormUrlencoded;
    
  }
  
  var getBodyElement, getContainerElement;
  
  if (attachDocumentReadyListener) {
    attachDocumentReadyListener(function() {
      var body, containerElement;

      getBodyElement = function(docNode) {
        docNode = docNode || global.document;
        if (isRealObjectProperty(docNode, 'body')) { return docNode.body; }
        if (typeof getEBTN == 'function') { return getEBTN('body', docNode)[0] || null; }
        return null;
      };

      API.getBodyElement = getBodyElement;

      body = getBodyElement();

      // Returns documentElement or body as best deemed appropriate
      // Result is ambiguous in all but modern browsers, so don't assume too much from it.
      getContainerElement = function(docNode) {
        docNode = docNode || global.document;
        return (docNode.documentElement && (!docNode.compatMode || docNode.compatMode.indexOf('CSS') != -1))?docNode.documentElement:getBodyElement(docNode);
      };

      API.getContainerElement = getContainerElement;

      containerElement = getContainerElement();
      
      body = containerElement = null;
    });
    
  }
  
  // Ajax section

  var createXmlHttpRequest = (function() { 
    var i, 
      fs = [// for legacy eg. IE 5 
            function() { 
              return new global.ActiveXObject("Microsoft.XMLHTTP"); 
            }, 
            // for fully patched Win2k SP4 and up 
            function() { 
              return new global.ActiveXObject("Msxml2.XMLHTTP.3.0"); 
            }, 
            // IE 6 users that have updated their msxml dll files. 
            function() { 
              return new global.ActiveXObject("Msxml2.XMLHTTP.6.0"); 
            }, 
            // IE7, Safari, Mozilla, Opera, etc (NOTE: IE7+ native version does not support overrideMimeType or local file requests)
            function() { 
              var o = new global.XMLHttpRequest();

              // Disallow IE7+ XHR if overrideMimeType (hack) method is required

              if (API.requireMimeTypeOverride) {
                if (!isHostMethod(o, 'overrideMimeType')) {
                  o = null;
                }
              }
              return o;
            }];

    // If local Xhr required and ActiveX constructor present, check ActiveX first

    if (API.requireLocalXhr && isHostMethod(global, 'ActiveXObject')) {
      fs.reverse();
    }

    // Loop through the possible factories to try and find one that
    // can instantiate an XMLHttpRequest object that works.

    for (i=fs.length; i--; ) { 
      try { 
        if (fs[i]()) { 
          return fs[i]; 
        } 
      } 
      catch (e) {} 
    }
  })();

  API.createXmlHttpRequest = createXmlHttpRequest;

  if (createXmlHttpRequest && Function.prototype.apply && isHostMethod(global, 'setTimeout')) {
  API.ajax = (function() {    
    var xmlhttp, pendingRequests = 0, groupRequests = {};
    var defaultTimeoutTime = 30000;
    var fnJsonFilter, Requester;

    var parseJsonString = (function() {
      if (isRealObjectProperty(global, 'JSON') && typeof global.JSON.parse == 'function') {
        return function(s) { return global.JSON.parse(s); };
      }
      else {
        return function(s) { return (new Function('return (' + s + ')'))(); };
      }
    })();

    API.parseJson = parseJsonString;

    var empty = function() {};

    function callback(sEvent, o, args) {
      var context = o.callbackContext || o;
      var m = o['on' + sEvent];
      if (m) {
        m.apply(context, args);
      }
    }

    function sessionCallback(sEvent, o, args) {
      args = args || [];
      callback(sEvent, API.ajax, [o.id(), o.group()].concat(args));
    }

    function bindCallbacks(a, objFrom, objTo) {
      var cb;
      var i = a.length;
      while (i--) {
        cb = 'on' + a[i];
        objFrom[cb] = objTo[cb];
      }
    }

    function requestStart(requester) {
      var sGroup = requester.group();

      pendingRequests++;
      if (pendingRequests == 1) { sessionCallback('start', requester); }
      if (sGroup) {
        if (typeof groupRequests[sGroup] == 'undefined') { groupRequests[sGroup] = 0; }
        groupRequests[sGroup]++;
        if (groupRequests[sGroup] == 1) { sessionCallback('groupstart', requester); }
      }
    }

    function requestFinish(requester) {
      var sGroup = requester.group();

      pendingRequests--;
      if (sGroup) {
        groupRequests[sGroup]--;
        if (!groupRequests[sGroup]) { sessionCallback('groupfinish', requester); }
      }
      if (!pendingRequests) { sessionCallback('finish', requester); }
    }

    function update(el, requester, xmlhttp, fnUpdate, bAppend, updateOptions, fnUpdated, context) {
      var method, xml, html = xmlhttp.responseText;
      var result = html;

      if (xmlhttp.responseXML && xmlhttp.responseXML.childNodes && xmlhttp.responseXML.childNodes.length) { xml = xmlhttp.responseXML; }
      if (fnUpdate) { result = fnUpdate.call(context || requester, html, xml); }
      if (typeof result == 'string') {
        method = (bAppend)?addElementHtml:setElementHtml;
      }
      else {
        // Import is not part of required combination (DOM + HTML + Requester)
        // Combination should be (DOM + (HTML | Import) + Requester)
        if (typeof addElementNodes == 'function') {
          method = (bAppend)?addElementNodes:setElementNodes;
        }
      }
      if (result) { method(el, result, updateOptions, fnUpdated); }
    }

    xmlhttp = createXmlHttpRequest();

    if (xmlhttp && isHostMethod(xmlhttp, 'setRequestHeader')) {
      Requester = function(sId, sGroup) {
        var timeout, evalJSON, bLocalFile;
        var xmlhttp = createXmlHttpRequest();
        var done = true;
        var that = this;
        var readyStateCallbacks = { '1':'loading', '2':'loaded', '3':'interactive' };
        var readyStateCallbacksCalled = [];
        var timeoutTime = defaultTimeoutTime;

        function stateChange() {
          var state = xmlhttp.readyState;
          if (state == 4) {
            if (!done) {
              done = true;
              xmlhttp.onreadystatechange = empty;
              global.clearTimeout(timeout);
              requestFinish(that);
              if (xmlhttp.status >= 200 && xmlhttp.status < 300 || xmlhttp.status == 1223 || (typeof xmlhttp.status == 'undefined' && xmlhttp.responseText) || (!xmlhttp.status && bLocalFile)) {
                that.dispatch('success', [xmlhttp, (evalJSON && xmlhttp.responseText)?parseJsonString(xmlhttp.responseText):null]);
              }
              else {
                that.dispatch('fail', [xmlhttp]);
              }
            }
          }
          else {
            if (!readyStateCallbacksCalled[state]) {
              that.dispatch(readyStateCallbacks[state], [xmlhttp]);
              readyStateCallbacksCalled[state] = true;
            }
          }
        }

        function abort() {
          if (!done) {
            done = true;
            global.clearTimeout(timeout);
            xmlhttp.onreadystatechange = empty;
            xmlhttp.abort();			
            requestFinish(that);
            that.dispatch('cancel', [xmlhttp]);
          }
        }

        function send(cmd, uri, postData, postDataType, bNoCache, bJSON) {
          if (done) {
            try {
              xmlhttp.open(cmd, uri, true, that.username, that.password);
            }
            catch(e) {
              //that.dispatch('error', [xmlhttp, e, uri]);
              sessionCallback('error', that, [xmlhttp, e, uri]);
              return false;
            }
            bLocalFile = !uri.indexOf('file:');
            postDataType = postDataType || 'application/x-www-form-urlencoded';
            xmlhttp.setRequestHeader("Content-Type", postDataType);
            xmlhttp.setRequestHeader("X-Requested-With", "XMLHttpRequest");
            if (bNoCache && cmd == 'GET') {
              xmlhttp.setRequestHeader('If-Modified-Since', 'Sat, 1 Jan 1990 00:00:00 GMT');
              xmlhttp.setRequestHeader('Cache-Control', 'no-cache');
            }
            that.dispatch('send', [xmlhttp, uri]);
            xmlhttp.onreadystatechange = stateChange;
            requestStart(that);
            readyStateCallbacksCalled = [];
            done = false;
            evalJSON = bJSON;
            try {
              xmlhttp.send((cmd == 'POST' || cmd == 'PUT')?postData:null);
              if (!done) { timeout = global.setTimeout(abort, timeoutTime); }
            }
            catch(E) {
              xmlhttp.onreadystatechange = empty;
              done = true;
              requestFinish(that);
              //that.dispatch('error', [xmlhttp, E, uri]);
              sessionCallback('error', that, [xmlhttp, E, uri]);
              return false;
            }
            return true;
          }
          return false;
        }
        
        this.busy = function() { return !done; };
				
        this.cancel = function() {
          abort();
        };

        if (isHostMethod(xmlhttp, 'overrideMimeType')) {
          this.overrideMimeType = function(mimeType) { xmlhttp.overrideMimeType(mimeType); };
        }
				
        this.get = function(uri, bJSON, bAllowCache) {
          return send('GET', uri, null, null, !bAllowCache, bJSON);
        };

        this.head = function(uri) {
          return send('HEAD', uri);
        };

        this.post = function(uri, data, type, bJSON) {
          return send('POST', uri, data, type, false, bJSON);
        };

        this.put = function(uri, data, type, bJSON) {
          return send('PUT', uri, data, type, false, bJSON);
        };

        this.group = function() {
          return sGroup;
        };

        this.id = function() {
          return sId;
        };

        this.setTimeoutTime = function(t) {
          timeoutTime = t;
        };
      };

      Requester.prototype.bindToObject = function(obj, bCallInContext) {
        bindCallbacks(['send', 'success', 'fail', 'cancel', 'loading', 'loaded', 'interactive'], this, obj);
        this.callbackContext = (typeof bCallInContext == 'undefined' || bCallInContext)?obj:null;
      };

      Requester.prototype.dispatch = function(sEvent, args) {
        callback(sEvent, this, args);
      };

      API.Requester = Requester;

      return {
        getPendingRequests:function() { return pendingRequests; },
        bindToObject:function(obj, bCallInContext) { bindCallbacks(['start', 'finish', 'error', 'groupstart', 'groupfinish'], this, obj); this.callbackContext = (typeof bCallInContext == 'undefined' || bCallInContext)?obj:null; },
        setTimeoutTime:function(t) { defaultTimeoutTime = t; },
        setJsonFilter:function(fn) { fnJsonFilter = fn; }
      };
    }
    xmlhttp = null;
  })();
  }
  
  doc = null;
  html = null;
})();
